.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "virt-image 5"
.TH virt-image 5 "2008-05-08" "perl v5.8.8" "Virtual Machine Install Tools"
.SH "NAME"
virt\-image \- Format of the virtual image XML descriptor
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIvirt\-image\fR\|(1) relies on an \s-1XML\s0 descriptor to create virtual machines from
virtual machine images. In general, a virtual machine image consists of the
\&\s-1XML\s0 descriptor (usually in a file \fIimage.xml\fR) and a number of files for
the virtual machine's disks.
.PP
In the following explanation of the structure of the image descriptor,
mandatory \s-1XML\s0 elements are marked as \fBelement\fR, whereas optional elements
are marked as \fIelement\fR.
.PP
All file names in the image descriptor are relative to the location of the
descriptor itself. Generally, disk files are either kept in the same
directory as the image descriptor, or in a subdirectory.
.SH "HOST MATCHING"
.IX Header "HOST MATCHING"
The image descriptor contains information on the requirements a guest has
on the host platform through one or more the \fI/image/domain/boot\fR
descriptors (see section \*(L"\s-1BOOT\s0\*(R"). The image can only be used if at least
one of the boot descriptors is suitable for the host platform; a boot
descriptor is suitable if:
.IP "\(bu" 4
The \s-1CPU\s0 architecture of the boot descriptor, given by the
\&\fIboot/guest/arch\fR element, is supported by the host
.IP "\(bu" 4
The host supports a guest with the features requested in the
\&\fIboot/guest/features\fR element, such as providing an \s-1APIC\s0, or having \s-1ACPI\s0
turned off
.PP
If a suitable boot descriptor is found, the guest is created and booted
according to the information about booting the \s-1OS\s0 from the \fIboot/os\fR
element and with the disks specified in the \fIboot/drive\fR element. If more
than one suitable boot descriptor is found, one of them is chosen based on
a heuristic, generally preferring paravirtualized guests over full
virtualized ones, though this is an implementation detail of the tool
creating the virtual machine.
.SH "STRUCTURE"
.IX Header "STRUCTURE"
The image descriptor consists of three sections, all contained in the
toplevel \fBimage\fR element:
.IP "General metadata about the image" 4
.IX Item "General metadata about the image"
A number of elements like \fIlabel\fR, \fBname\fR, and \fIdescription\fR that give
some simple information about the image. The \fBname\fR must be a string
suitable as a name for the virtual machine, the \fIlabel\fR is a short
human-readable string suitable for display in graphical \s-1UI\s0's, and the
\&\fIdescription\fR should be a longer, free-form description of the purpose of
the image. The \fBname\fR is mandatory.
.IP "Virtual machine attributes" 4
.IX Item "Virtual machine attributes"
The \fBdomain\fR element contains instructions on how to boot the image, and
device attributes such as the number of virtual \s-1CPU\s0's and the size of the
memory. (see section \*(L"\s-1DOMAIN\s0\*(R")
.IP "Storage layout" 4
.IX Item "Storage layout"
The \fBstorage\fR element lists the files to back the virtual machine's disks
and some information about their format and use. (see section \*(L"\s-1STORAGE\s0\*(R")
.SH "DOMAIN"
.IX Header "DOMAIN"
The \fBdomain\fR element contains one or more \fBboot\fR descriptors (see section
\&\*(L"\s-1BOOT\s0\*(R") and a \fBdevices\fR element. The \fBDevices\fR element lists the
recommended number of virtual \s-1CPU\s0's in the \fBvcpu\fR element and the
recommended amount of memory in kB in the \fBmemory\fR element. It also
indicates whether the virtual machine should have a network interface
through the \fIinterface\fR element and whether the virtual machine has a
graphical interface through the \fIgraphics\fR element.
.Sh "\s-1BOOT\s0"
.IX Subsection "BOOT"
Each \fBboot\fR descriptor details how the virtual machine should be started
on a certain hypervisor. The \fBtype\fR attribute of the \fBboot\fR element,
which can either be \f(CW\*(C`xen\*(C'\fR or \f(CW\*(C`hvm\*(C'\fR, depending on whether the boot
descriptor is for a paravirtualized Xen(tm) guest or a fully-virtualized
guest.
.PP
The \fBboot\fR element contains three subelements:
.IP "The platform requirements of the guest" 4
.IX Item "The platform requirements of the guest"
The platform requirements, contained in the \fBguest\fR element, consist of
the \fBarch\fR element and the \fIfeatures\fR element. The \fBarch\fR element
indicates the \s-1CPU\s0 architecture the guest expects, e.g. \f(CW\*(C`i686\*(C'\fR, \f(CW\*(C`x86_64\*(C'\fR,
or \f(CW\*(C`ppc\*(C'\fR.
.Sp
The \fIfeatures\fR element indicates whether certain platform features should
be on or off. Currently, the platform features are \fIpae\fR, \fIacpi\fR, and
\&\fIapic\fR. They can be turned on or off by giving a \fIstate\fR attribute of
either \f(CW\*(C`on\*(C'\fR or \f(CW\*(C`off\*(C'\fR. When a feature is mentioned in the \fIfeatures\fR
element, it defaults to \f(CW\*(C`on\*(C'\fR.
.IP "The details of booting the image's operating system" 4
.IX Item "The details of booting the image's operating system"
The \fBos\fR element for fully-virtualized \f(CW\*(C`hvm\*(C'\fR guests contains a \fBloader\fR
element whose \fBdev\fR attribute indicates whether to boot off a hard disk
(\f(CW\*(C`dev='hd'\*(C'\fR) or off a CD-ROM (\f(CW\*(C`dev='cdrom'\*(C'\fR)
.Sp
For paravirtualized guests, the \fBos\fR element either contains a
\&\f(CW\*(C`<loader>pygrub</loader>\*(C'\fR element, indicating that the guest should be
booted with \fIpygrub\fR, or \fBkernel\fR, \fIinitrd\fR and \fIcmdline\fR elements. The
contents of the \fBkernel\fR and \fIinitrd\fR elements are the names of the
kernel and initrd files, whereas the \fIcmdline\fR element contains the
command line that should be passed to the kernel on boot.
.IP "The mapping of disk files as devices into the guest" 4
.IX Item "The mapping of disk files as devices into the guest"
The mapping of disk files into the guest is performed by a list of \fBdrive\fR
elements inside the \fBboot\fR element. Each \fBdrive\fR element references the
name of a disk file from the \*(L"\s-1STORAGE\s0\*(R" section through its \fBdisk\fR
attribute and can optionally specify as what device that disk file should
appear in the guest through its \fItarget\fR attribute. If the \fItarget\fR is
omitted, device names are assigned in the order in which the \fBdrive\fR
elements appear, skipping already assigned devices.
.SH "STORAGE"
.IX Header "STORAGE"
The \fBstorage\fR element lists the disk image files that are part of the
virtual machine image in a list of one or more \fBdisk\fR elements. Each
\&\fBdisk\fR element can contain the following attributes:
.IP "\(bu" 4
the \fBfile\fR attribute giving the name of the disk file
.IP "\(bu" 4
an optional \fIid\fR attribute. The name given with that attribute is used to
reference the disk from the \fBdrive\fR element of a \fBboot\fR descriptor. If
the \fIid\fR attribute is missing, it defaults to the \fBfile\fR attribute.
.IP "\(bu" 4
the \fBuse\fR attribute indicating whether the disk file is a \f(CW\*(C`system\*(C'\fR,
\&\f(CW\*(C`user\*(C'\fR, or \f(CW\*(C`scratch\*(C'\fR disk. The \fBuse\fR attribute differentiates disk files
so that an update based on replacing disk files can replace \f(CW\*(C`system\*(C'\fR
disks, but leave \f(CW\*(C`user\*(C'\fR disks untouched.
.Sp
Generally, \f(CW\*(C`system\*(C'\fR disks contain application code, \f(CW\*(C`user\*(C'\fR disks contain
the application's data, and \f(CW\*(C`scratch\*(C'\fR disks contain temporary state that
can be erased between runs of the guest.
.Sp
The virtual machine image must contain files for all \f(CW\*(C`system\*(C'\fR disks, and
may contain files for the \f(CW\*(C`user\*(C'\fR and \f(CW\*(C`scratch\*(C'\fR disks. If the latter are
not part of the image, they are initialized as empty files when a guest is
created, with the size given by the \fIsize\fR attribute.
.IP "\(bu" 4
the \fIsize\fR attribute giving the size of the disk in \s-1MB\s0.
.IP "\(bu" 4
the \fIformat\fR attribute giving the format of the disk file. Currently, this
can be one of: \f(CW\*(C`raw\*(C'\fR \f(CW\*(C`iso\*(C'\fR, \f(CW\*(C`qemu\*(C'\fR, \f(CW\*(C`qemu2\*(C'\fR, or \f(CW\*(C`vmdk\*(C'\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
The image descriptor below can be used to create a virtual machine running
the System Rescue \s-1CD\s0 (\f(CW\*(C`http://www.sysresccd.org/\*(C'\fR) Besides the descriptor,
you only need the \s-1ISO\s0 image from the System Rescue \s-1CD\s0 website.
.PP
.Vb 27
\&    <?xml version="1.0" encoding="UTF-8"?>
\&    <image>
\&      <name>sysresccd</name>
\&      <domain>
\&        <boot type="hvm">
\&          <guest>
\&            <arch>i686</arch>
\&          </guest>
\&          <os>
\&            <loader dev="cdrom"/>
\&          </os>
\&          <drive disk="root.raw" target="hda"/>
\&          <drive disk="sysresc"/>
\&        </boot>
\&        <devices>
\&          <vcpu>1</vcpu>
\&          <memory>262144</memory>
\&          <interface/>
\&          <graphics/>
\&        </devices>
\&      </domain>
\&      <storage>
\&        <disk file="root.raw" use="scratch" size="100" format="raw"/>
\&        <disk id="sysresc" file="isos/systemrescuecd.iso" 
\&              use="system" format="iso"/>
\&      </storage>
\&    </image>
.Ve
.PP
To create a virtual machine, save the above \s-1XML\s0 in \fIimage.xml\fR and run:
.PP
.Vb 1
\&    # virt-image --vnc image.xml
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by David Lutterkort. See the \s-1AUTHORS\s0 file in the source distribution for
the complete list of credits.
.SH "BUGS"
.IX Header "BUGS"
Report bugs to the mailing list \f(CW\*(C`http://www.redhat.com/mailman/listinfo/et\-mgmt\-tools\*(C'\fR
or directly to BugZilla \f(CW\*(C`http://bugzilla.redhat.com/bugzilla/\*(C'\fR against the
\&\f(CW\*(C`Fedora\*(C'\fR product, and the \f(CW\*(C`python\-virtinst\*(C'\fR component.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2006\-2007 Red Hat, Inc, and various contributors. 
This is free software. You may redistribute copies of it under the terms of the \s-1GNU\s0 General 
Public License \f(CW\*(C`http://www.gnu.org/licenses/gpl.html\*(C'\fR. There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent 
permitted by law.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIvirt\-image\fR\|(1), \fIvirt\-install\fR\|(1), the project website
\&\f(CW\*(C`http://virt\-manager.org\*(C'\fR, the Relax-NG grammar for image \s-1XML\s0 \f(CW\*(C`image.rng\*(C'\fR
